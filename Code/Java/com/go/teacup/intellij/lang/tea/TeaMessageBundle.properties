plugin.Tea.description=Enables Tea support in IntelliJ IDEA.

tea.filetype.description=Tea templates

#language terms
tea.language.term.template=template
tea.language.term.parameter=parameter
tea.language.term.property=property
tea.language.term.variable=variable
tea.language.term.value=value
tea.language.term.tag=tag
tea.language.term.label=label
tea.language.term.prototype=prototype
tea.language.term.type=type
tea.language.term.reference=Value read

#parser error messages
tea.parser.message.expected.expression=expression expected
tea.parser.message.expected.property=property expected
tea.parser.message.expected.lbrace={ expected
tea.parser.message.expected.rbrace=} expected
tea.parser.message.expected.identifier.string.literal.or.numeric.literal=identifier or string literal or numeric literal expected
tea.parser.message.expected.colon=: expected
tea.parser.message.expected.semicolon=; expected
tea.parser.message.expected.expression.comma.or.rbracket=expression or , or ] expected
tea.parser.message.expected.rbracket=] expected
tea.parser.message.expected.lparen=( expected
tea.parser.message.expected.rparen=) expected
tea.parser.message.expected.name=name expected
tea.parser.message.expected.type=type expected
tea.parser.message.expected.comma.or.rparen=, or ) expected
tea.parser.message.expected.template.name=template name expected
tea.parser.message.expected.formal.parameter.name=formal parameter name expected
tea.parser.message.expected.statement=statement expected
tea.parser.message.expected.parameter.name=parameter name expected
tea.parser.message.expected.catch.or.default=catch or default expected
tea.parser.message.expected.forloop.left.hand.side.expression.or.variable.declaration=left hand side expression or variable declaration expected before 'in'
tea.parser.message.expected.forloop.in.or.semicolon='in' or ; expected
tea.parser.message.expected.forloop.in='in' expected
tea.parser.message.expected.while.keyword=while expected
tea.parser.message.expected.comma=, expected
tea.parser.message.expected.variable.name=variable name expected
tea.parser.message.missing.rbrace=missing }
tea.parser.message.unexpected.end.of.file=unexpected end of file
tea.parser.message.unclosed.string.literal=Unclosed string literal
tea.parser.message.expected.lscript=<% expected
tea.parser.message.expected.rscript=%> expected

#validation messages
tea.validation.message.duplicate.declaration=Duplicate declaration
tea.validation.message.assignment.to.const=Attempt to assign to const variable
tea.validation.message.arguments.out.of.function=Using function arguments object outside function
tea.validation.message.must.be.lvalue=Must be lvalue
tea.validation.message.const.variable.without.initializer.=const variable without initializer. It won't be possible to assign meaningful value later.
tea.validation.message.continue.without.target=Cannot determine target for 'continue'
tea.validation.message.break.without.target=Cannot determine target for 'break'
tea.validation.message.return.outside.function.definition='return' outside function definition
tea.validation.message.duplicate.label=Duplicate label

#surround with names
tea.surround.with.do.while=do / while
tea.surround.with.foreach=foreach
tea.surround.with.if=if
tea.surround.with.if.else=if / else
tea.surround.with.parenthesis=(expr)
tea.surround.with.try.catch=try / catch
tea.surround.with.try.finally=try / finally
tea.surround.with.try.catch.finally=try / catch / finally
tea.surround.with.while=while
tea.surround.with.with=with

tea.introduce.variable.title=Introduce Variable
tea.introduce.variable.error.no.expression.selected=Cannot introduce variable.\nSelection does not form an expression.
tea.introduce.variable.name.prompt=&Name:
tea.introduce.variable.replace.all.occurrences=Replace &all occurrences ({0} occurrences found)
tea.introduce.variable.invalid.name=Please enter a valid name.
tea.introduce.variable.variable.already.exists=Variable with name {0} already exists in the scope.
tea.introduce.variable.function.already.exists=Function with name {0} already exists in the scope.

#Highlighting categories
tea.keyword=Keyword
tea.string=String
tea.number=Number
tea.linecomment=Line comment
tea.doccomment=Doc comment
tea.blockcomment=Block comment
tea.regexp=Regular expression
tea.operation=Operation
tea.parens=Parenthesis
tea.brackets=Brackets
tea.braces=Braces
tea.semicolon=Semicolon
tea.badcharacter=Bad character
tea.docmarkup=Documentation markup
tea.doctag=Documentation tag
tea.valid.string.escape=Valid string escape
tea.invalid.string.escape=Invalid string escape
tea.comma=Comma
tea.dot=Dot
tea.scripting.background=Scripting Background
tea.scripting.foreground=Script Delimiters

building.index.message=Building Tea indices
loading.index.message=Loading Tea indices

#errors with intentions
tea.unresolved.function.name.message=Unresolved Function {0} #loc
tea.unresolved.variable.name.message=Unresolved Variable {0} #loc
tea.undeclared.variable.name.message=Variable {0} implicitly declared #loc
tea.create.function.intention.name=Create Function {0}
tea.create.variable.intention.name=Create Variable {0}
tea.declare.variable.intention.name=Insert Var Declaration for {0}
tea.create.property.intention.name=Create Field {0}
tea.create.method.intention.name=Create Method {0}
tea.create.function.intention.family=Create Tea Function or Method
tea.create.variable.intention.family=Create Tea Variable Or Property
tea.inspection.group.name=Tea Inspections
tea.unresolved.variable.inspection.name=Unresolved Tea Variables
tea.undeclared.variable.inspection.name=Implicitly Declared Tea Variables
tea.unresolved.function.inspection.name=Unresolved Tea Functions
tea.parser.message.expected.ellipsis=... expected