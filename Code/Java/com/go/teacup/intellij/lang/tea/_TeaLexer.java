/* The following code was generated by JFlex 1.4.1 on 4/12/07 5:47 PM */

package com.go.teacup.intellij.lang.tea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/12/07 5:47 PM from the specification file
 * <tt>C:/Projects/TeaCup/Development/IDEAPlugin/1.0.0/Code/Java/com/go/teacup/intellij/lang/tea/Tea.flex</tt>
 */
class _TeaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SCRIPTLET = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\16\1\0\1\3\1\10\16\5\4\0\1\3\1\51"+
    "\1\21\1\64\1\4\1\23\1\52\1\17\1\53\1\54\1\7\1\63"+
    "\1\62\1\15\1\13\1\6\1\11\11\1\1\0\1\61\1\22\1\50"+
    "\1\24\2\0\4\2\1\14\1\2\21\4\1\12\2\4\1\57\1\20"+
    "\1\60\1\0\1\4\1\0\1\32\1\40\1\42\1\36\1\30\1\31"+
    "\1\4\1\44\1\43\1\4\1\41\1\33\1\45\1\35\1\37\1\46"+
    "\1\4\1\26\1\34\1\25\1\27\1\47\1\4\1\12\2\4\1\55"+
    "\1\0\1\56\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5"+
    "\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4"+
    "\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4\21\0\130\5"+
    "\5\0\23\5\12\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4"+
    "\1\0\4\5\3\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4"+
    "\41\0\46\4\2\0\1\4\7\0\47\4\11\0\21\5\1\0\27\5"+
    "\1\0\3\5\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\4"+
    "\5\0\3\4\15\0\4\5\14\0\6\5\13\0\32\4\5\0\13\4"+
    "\16\5\7\0\12\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5"+
    "\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0"+
    "\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0\3\4\60\0"+
    "\46\4\13\5\1\4\u014f\0\3\5\66\4\2\0\1\5\1\4\20\5"+
    "\2\0\1\4\4\5\3\0\12\4\2\5\2\0\12\5\21\0\3\5"+
    "\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4"+
    "\3\0\4\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5"+
    "\11\0\1\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4"+
    "\15\0\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5"+
    "\4\0\2\5\2\0\3\5\13\0\4\4\1\0\1\4\7\0\14\5"+
    "\3\4\14\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0"+
    "\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5"+
    "\1\0\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\6\5"+
    "\3\0\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4"+
    "\4\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\10\4\1\0\3\4\4\0\5\5\3\0"+
    "\3\5\1\0\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0"+
    "\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\4\0\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0"+
    "\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\20\4\4\0\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0"+
    "\2\4\4\0\12\5\22\0\2\5\1\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0"+
    "\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5"+
    "\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5"+
    "\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\5\2\0\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0"+
    "\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4"+
    "\1\0\42\4\6\0\24\5\1\0\2\5\4\4\4\0\10\5\1\0"+
    "\44\5\11\0\1\5\71\0\42\4\1\0\5\4\1\0\2\4\1\0"+
    "\7\5\3\0\4\5\6\0\12\5\6\0\6\4\4\5\106\0\46\4"+
    "\12\0\51\4\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4"+
    "\1\0\77\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\5"+
    "\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4"+
    "\3\0\3\4\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5"+
    "\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0"+
    "\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0"+
    "\3\5\2\0\12\5\6\0\130\4\10\0\51\4\1\5\126\0\35\4"+
    "\3\0\14\5\4\0\14\5\12\0\12\5\36\4\2\0\5\4\u038b\0"+
    "\154\4\224\0\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0"+
    "\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0"+
    "\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0"+
    "\3\4\1\0\7\4\17\0\4\5\32\0\5\5\20\0\2\4\23\0"+
    "\1\4\13\0\4\5\6\0\6\5\1\0\1\4\15\0\1\4\40\0"+
    "\22\4\36\0\15\5\4\0\1\5\3\0\6\5\27\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0"+
    "\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\6\5"+
    "\1\0\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4"+
    "\1\0\137\4\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4"+
    "\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4"+
    "\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4"+
    "\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4"+
    "\3\0\20\5\20\0\4\5\17\0\2\4\30\0\3\4\31\0\1\4"+
    "\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5"+
    "\7\0\32\4\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4"+
    "\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\13\4\1\17\1\2\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\0\1\34\1\35\1\0\1\36\2\12\2\13"+
    "\1\37\1\40\1\41\6\4\1\42\4\4\1\43\2\4"+
    "\1\44\1\4\1\45\1\4\1\46\1\47\1\50\1\3"+
    "\1\0\1\3\1\51\2\12\2\13\6\4\1\52\1\4"+
    "\1\53\3\4\1\54\1\4\1\3\1\35\1\55\2\4"+
    "\1\56\2\4\1\57\2\4\1\60\1\4\1\3\2\4"+
    "\1\61\2\4\1\62\4\4\1\63\1\64\1\4\1\65"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\324\0\u01dd\0\u0212\0\324\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\324"+
    "\0\324\0\324\0\324\0\324\0\324\0\324\0\324\0\324"+
    "\0\324\0\u0601\0\u0636\0\324\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u073f\0\324\0\u0774\0\u07a9\0\324\0\324\0\324\0\324"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u013e\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u013e\0\u09f0\0\u0a25\0\u013e\0\u0a5a"+
    "\0\u013e\0\u0a8f\0\324\0\324\0\324\0\u0ac4\0\u0af9\0\u070a"+
    "\0\324\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u013e\0\u0d40\0\u013e\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u013e\0\u0e14\0\u0e49\0\324\0\u013e\0\u0e7e\0\u0eb3"+
    "\0\u013e\0\u0ee8\0\u0f1d\0\u013e\0\u0f52\0\u0f87\0\u013e\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u013e\0\u1090\0\u10c5\0\u013e\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u013e\0\u013e\0\u11ce\0\u013e\0\u013e"+
    "\0\u013e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\22\3\1\4\42\3\1\5\1\6\1\7\1\10\1\7"+
    "\1\5\1\11\1\12\1\10\1\13\1\7\1\14\1\7"+
    "\1\15\1\10\1\16\1\5\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\7\1\25\1\26\1\27\2\7\1\30"+
    "\1\31\1\32\1\33\1\7\1\34\1\35\4\7\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\22\3\1\53\64\3\1\53"+
    "\1\54\41\3\66\0\1\6\7\0\1\6\1\0\1\55"+
    "\52\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\23\7\20\0\1\10\4\0\1\10\5\0\1\10"+
    "\54\0\1\56\1\57\56\0\1\6\7\0\1\6\1\60"+
    "\1\55\64\0\1\61\51\0\10\16\1\0\5\16\1\0"+
    "\1\62\1\63\44\16\10\17\1\0\5\17\1\0\1\17"+
    "\1\64\1\65\43\17\50\0\1\66\40\0\1\67\110\0"+
    "\1\70\15\0\2\7\1\0\2\7\3\0\2\7\1\0"+
    "\1\7\10\0\1\7\1\71\1\7\1\72\17\7\16\0"+
    "\2\7\1\0\2\7\3\0\2\7\1\0\1\7\10\0"+
    "\3\7\1\73\17\7\16\0\2\7\1\0\2\7\3\0"+
    "\2\7\1\0\1\7\10\0\6\7\1\74\14\7\16\0"+
    "\2\7\1\0\2\7\3\0\2\7\1\0\1\7\10\0"+
    "\5\7\1\75\4\7\1\76\10\7\16\0\2\7\1\0"+
    "\2\7\3\0\2\7\1\0\1\7\10\0\7\7\1\77"+
    "\1\100\12\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\2\7\1\101\7\7\1\102\10\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\3\7\1\103\17\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\1\7\1\104\21\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\1\7\1\105\21\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\5\7\1\106\15\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\4\7\1\107\2\7\1\110\1\111\7\7\1\112"+
    "\2\7\65\0\1\113\64\0\1\114\100\0\1\115\22\3"+
    "\1\53\1\0\41\3\1\0\1\116\7\0\1\116\53\0"+
    "\10\56\1\0\5\56\1\0\46\56\7\57\1\117\55\57"+
    "\1\0\2\120\6\0\1\120\2\0\1\120\13\0\3\120"+
    "\3\0\1\120\1\0\1\120\1\0\1\120\35\0\1\121"+
    "\51\0\3\16\1\122\4\16\1\123\54\16\3\17\1\124"+
    "\4\17\1\125\54\17\1\0\2\7\1\0\2\7\3\0"+
    "\2\7\1\0\1\7\10\0\2\7\1\126\20\7\16\0"+
    "\2\7\1\0\2\7\3\0\2\7\1\0\1\7\10\0"+
    "\20\7\1\127\2\7\16\0\2\7\1\0\2\7\3\0"+
    "\2\7\1\0\1\7\10\0\22\7\1\130\16\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\0\1\7\10\0\7\7"+
    "\1\131\13\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\6\7\1\132\14\7\16\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\0\1\7\10\0\1\7"+
    "\1\133\21\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\11\7\1\134\11\7\16\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\0\1\7\10\0\6\7"+
    "\1\135\14\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\1\136\22\7\16\0\2\7\1\0"+
    "\2\7\3\0\2\7\1\0\1\7\10\0\4\7\1\137"+
    "\16\7\16\0\2\7\1\0\2\7\3\0\2\7\1\0"+
    "\1\7\10\0\3\7\1\140\17\7\16\0\2\7\1\0"+
    "\2\7\3\0\2\7\1\0\1\7\10\0\6\7\1\141"+
    "\14\7\16\0\2\7\1\0\2\7\3\0\2\7\1\0"+
    "\1\7\10\0\5\7\1\142\15\7\16\0\2\7\1\0"+
    "\2\7\3\0\2\7\1\0\1\7\10\0\21\7\1\143"+
    "\1\7\16\0\1\116\7\0\1\116\2\0\1\144\13\0"+
    "\1\144\34\0\6\57\1\145\1\117\55\57\3\16\1\122"+
    "\4\16\1\123\6\16\1\62\1\63\54\16\1\0\6\16"+
    "\1\62\1\63\44\16\3\17\1\124\4\17\1\125\7\17"+
    "\1\64\1\65\53\17\1\0\7\17\1\64\1\65\43\17"+
    "\1\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\3\7\1\146\17\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\21\7\1\147\1\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\3\7\1\150\17\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\3\7\1\151\17\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\7\7\1\152\13\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\3\7\1\153\17\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\6\7\1\154\14\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\16\7\1\155\4\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\5\7\1\156\15\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\6\7\1\157\14\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\12\7\1\160\10\7\16\0\1\161\7\0\1\161"+
    "\3\0\1\161\45\0\1\161\2\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\6\7\1\162\14\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\1\7\1\163\21\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\3\7\1\164\17\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\5\7\1\165\15\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\10\7\1\166\12\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\14\7\1\167\6\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\1\7\1\170\21\7"+
    "\16\0\1\161\7\0\1\161\54\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\5\7\1\171\15\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\7\7\1\172\13\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\15\7\1\173\5\7"+
    "\16\0\2\7\1\0\2\7\3\0\2\7\1\0\1\7"+
    "\10\0\3\7\1\174\17\7\16\0\2\7\1\0\2\7"+
    "\3\0\2\7\1\0\1\7\10\0\1\175\22\7\16\0"+
    "\2\7\1\0\2\7\3\0\2\7\1\0\1\7\10\0"+
    "\1\176\22\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\3\7\1\177\17\7\16\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\0\1\7\10\0\17\7"+
    "\1\200\3\7\16\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\0\1\7\10\0\3\7\1\201\17\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4611];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\1\11\4\1\1\11\2\1\1\11"+
    "\22\1\12\11\1\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\11\2\1\4\11\22\1\3\11\1\1\1\0"+
    "\1\1\1\11\23\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _TeaLexer() {
      this((java.io.Reader)null);
    }

    public _TeaLexer(boolean highlightMode) {
      this((java.io.Reader)null);
      isHighlightModeOn = highlightMode;
    }

    boolean isHighlightModeOn = false;


  _TeaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _TeaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return TeaTokenTypes.STRING_LITERAL;
          }
        case 56: break;
        case 52: 
          { return TeaTokenTypes.IMPORT_KEYWORD;
          }
        case 57: break;
        case 51: 
          { return TeaTokenTypes.DEFINE_KEYWORD;
          }
        case 58: break;
        case 28: 
          { return TeaTokenTypes.END_OF_LINE_COMMENT;
          }
        case 59: break;
        case 14: 
          { return TeaTokenTypes.GT;
          }
        case 60: break;
        case 55: 
          { return TeaTokenTypes.TEMPLATE_KEYWORD;
          }
        case 61: break;
        case 39: 
          { return TeaTokenTypes.NE;
          }
        case 62: break;
        case 7: 
          { return TeaTokenTypes.MULT;
          }
        case 63: break;
        case 23: 
          { return TeaTokenTypes.SEMICOLON;
          }
        case 64: break;
        case 36: 
          { return TeaTokenTypes.IF_KEYWORD;
          }
        case 65: break;
        case 41: 
          { return TeaTokenTypes.ELLIPSIS;
          }
        case 66: break;
        case 49: 
          { return TeaTokenTypes.FALSE_KEYWORD;
          }
        case 67: break;
        case 24: 
          { return TeaTokenTypes.COMMA;
          }
        case 68: break;
        case 15: 
          { return TeaTokenTypes.EQ;
          }
        case 69: break;
        case 17: 
          { return TeaTokenTypes.LPAR;
          }
        case 70: break;
        case 22: 
          { return TeaTokenTypes.RBRACKET;
          }
        case 71: break;
        case 35: 
          { return TeaTokenTypes.OR_KEYWORD;
          }
        case 72: break;
        case 31: 
          { return TeaTokenTypes.LE;
          }
        case 73: break;
        case 34: 
          { return TeaTokenTypes.AS_KEYWORD;
          }
        case 74: break;
        case 40: 
          { return TeaTokenTypes.HASHHASH;
          }
        case 75: break;
        case 29: 
          { return TeaTokenTypes.C_STYLE_COMMENT;
          }
        case 76: break;
        case 3: 
          { return TeaTokenTypes.NUMERIC_LITERAL;
          }
        case 77: break;
        case 2: 
          { return TeaTokenTypes.BAD_CHARACTER;
          }
        case 78: break;
        case 26: 
          { return TeaTokenTypes.HASH;
          }
        case 79: break;
        case 19: 
          { return TeaTokenTypes.LBRACE;
          }
        case 80: break;
        case 20: 
          { return TeaTokenTypes.RBRACE;
          }
        case 81: break;
        case 32: 
          { yybegin(YYINITIAL); return TeaTokenTypes.RSCRIPT;
          }
        case 82: break;
        case 47: 
          { return TeaTokenTypes.NULL_KEYWORD;
          }
        case 83: break;
        case 27: 
          { yybegin(SCRIPTLET); return TeaTokenTypes.LSCRIPT;
          }
        case 84: break;
        case 1: 
          { return TeaTokenTypes.PLAIN_TEXT;
          }
        case 85: break;
        case 38: 
          { return TeaTokenTypes.EQEQ;
          }
        case 86: break;
        case 12: 
          { return TeaTokenTypes.LT;
          }
        case 87: break;
        case 45: 
          { return TeaTokenTypes.TRUE_KEYWORD;
          }
        case 88: break;
        case 30: 
          { return TeaTokenTypes.DOTDOT;
          }
        case 89: break;
        case 44: 
          { return TeaTokenTypes.ISA;
          }
        case 90: break;
        case 13: 
          { return TeaTokenTypes.PERC;
          }
        case 91: break;
        case 43: 
          { return TeaTokenTypes.NOT_KEYWORD;
          }
        case 92: break;
        case 18: 
          { return TeaTokenTypes.RPAR;
          }
        case 93: break;
        case 9: 
          { return TeaTokenTypes.MINUS;
          }
        case 94: break;
        case 21: 
          { return TeaTokenTypes.LBRACKET;
          }
        case 95: break;
        case 53: 
          { return TeaTokenTypes.REVERSE_KEYWORD;
          }
        case 96: break;
        case 5: 
          { return TeaTokenTypes.SCRIPT_WHITE_SPACE;
          }
        case 97: break;
        case 8: 
          { return TeaTokenTypes.DOT;
          }
        case 98: break;
        case 4: 
          { return TeaTokenTypes.IDENTIFIER;
          }
        case 99: break;
        case 37: 
          { return TeaTokenTypes.IN_KEYWORD;
          }
        case 100: break;
        case 6: 
          { return TeaTokenTypes.DIV;
          }
        case 101: break;
        case 50: 
          { return TeaTokenTypes.BREAK_KEYWORD;
          }
        case 102: break;
        case 42: 
          { return TeaTokenTypes.AND_KEYWORD;
          }
        case 103: break;
        case 46: 
          { return TeaTokenTypes.ELSE_KEYWORD;
          }
        case 104: break;
        case 25: 
          { return TeaTokenTypes.PLUS;
          }
        case 105: break;
        case 16: 
          { return TeaTokenTypes.AND;
          }
        case 106: break;
        case 54: 
          { return TeaTokenTypes.FOREACH_KEYWORD;
          }
        case 107: break;
        case 10: 
          { return isHighlightModeOn ?
                          TeaTokenTypes.SINGLE_QUOTE_STRING_LITERAL:
                          TeaTokenTypes.STRING_LITERAL;
          }
        case 108: break;
        case 33: 
          { return TeaTokenTypes.GE;
          }
        case 109: break;
        case 48: 
          { return TeaTokenTypes.CALL_KEYWORD;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
